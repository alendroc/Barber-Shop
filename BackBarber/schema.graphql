type Query {
  usuario(id: ID!): Usuario
  usuarioByCorreo(correo: String!): Usuario
  usuarios(limit: Int): UsuarioSubList
  barberoDetail(idBarbero: ID!): BarberoDetail
  barberos(limit: Int): BarberoSubList
  cita(id: ID!): Cita
  citas(limit: Int): CitaSubList
  citasUsuario: CitaSubList
}

type Usuario {
  id: ID!
  nombre: String!
  apellido: String!
  correo: String!
  telefono: String
  rol: String!
  citas: [Cita]
  barberos: [BarberoDetail]
}

type BarberoDetail {
  id: ID!
  usuario: Usuario!
  imagen: String
  descripcion: String!
}

type Cita {
  id: ID!
  fecha: String!
  hora: String!
  usuario: Usuario!
  barbero: BarberoDetail!
}

type UsuarioSubList {
  items: [Usuario]
}

type BarberoSubList {
  items: [BarberoDetail]
}

type CitaSubList {
  items: [Cita]
}

type Mutation {
  crearUsuario(input: UsuarioInput!): Usuario
  actualizarUsuario(input: UsuarioUpdateInput!): Usuario
  adminActualizarUsuario(input: AdminUsuarioInput!): Usuario
  eliminarUsuario(id: ID!): Usuario

  crearBarbero(input: BarberoInput!): BarberoDetail
  actualizarBarbero(input: BarberoUpdateInput!): BarberoDetail

  crearCita(input: CitaInput!): Cita
  adminCrearCita(input: AdminCitaInput!): Cita
  eliminarCita(id: ID!): Cita
}

input UsuarioInput {
  nombre: String!
  apellido: String!
  correo: String!
  telefono: String
  password: String!
}

input UsuarioUpdateInput {
  nombre: String
  apellido: String
  telefono: String
  password: String
}

input AdminUsuarioInput {
  id: ID!
  nombre: String
  apellido: String
  telefono: String
  rol: String
}

input BarberoInput {
  usuario: ID!
  imagen: String
  descripcion: String!
}

input BarberoUpdateInput {
  id: ID!
  imagen: String
  descripcion: String
}

input CitaInput {
  fecha: String!
  hora: String!
  barbero: ID!
}

input AdminCitaInput {
  fecha: String!
  hora: String!
  usuario: ID!
  barbero: ID!
}
